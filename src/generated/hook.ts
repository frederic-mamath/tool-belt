/**
 * Generated by orval v6.11.1 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useQuery,
  useMutation
} from 'react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  PhilipsHueLightInboundDto,
  SignUpOutboundDto,
  SignUpInboundDto,
  TicketsOutboundDto,
  TicketOutboundDto,
  CreateTicketsInboundDto,
  RecipeOutboundDto,
  CreateRecipeOutboundDto,
  CreateRecipeInboundDto,
  PortfolioContactOutboundDto,
  PortfolioContactInboundDto,
  EmailInboundDto,
  BookingOutboundDto,
  Booking,
  BookingInboundDto,
  TeamUserOutboundDto,
  ConnectedUserOutboundDto,
  ActiveSprintOutboundDto,
  BurndownChartColumnOutboundDto,
  RestaurantOutboundDto,
  PhilipsHueLightOutboundDto
} from './model'
import { customInstance } from '../services/network';



export const updateLightById = (
    lightId: number,
    philipsHueLightInboundDto: PhilipsHueLightInboundDto,
 ) => {
      return customInstance<void>(
      {url: `/api/lights/${lightId}`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: philipsHueLightInboundDto
    },
      );
    }
  


    export type UpdateLightByIdMutationResult = NonNullable<Awaited<ReturnType<typeof updateLightById>>>
    export type UpdateLightByIdMutationBody = PhilipsHueLightInboundDto
    export type UpdateLightByIdMutationError = unknown

    export const useUpdateLightById = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLightById>>, TError,{lightId: number;data: PhilipsHueLightInboundDto}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateLightById>>, {lightId: number;data: PhilipsHueLightInboundDto}> = (props) => {
          const {lightId,data} = props ?? {};

          return  updateLightById(lightId,data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof updateLightById>>, TError, {lightId: number;data: PhilipsHueLightInboundDto}, TContext>(mutationFn, mutationOptions);
    }
    
export const signUp = (
    signUpInboundDto: SignUpInboundDto,
 ) => {
      return customInstance<SignUpOutboundDto>(
      {url: `/api/users/sign-up`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: signUpInboundDto
    },
      );
    }
  


    export type SignUpMutationResult = NonNullable<Awaited<ReturnType<typeof signUp>>>
    export type SignUpMutationBody = SignUpInboundDto
    export type SignUpMutationError = unknown

    export const useSignUp = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpInboundDto}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signUp>>, {data: SignUpInboundDto}> = (props) => {
          const {data} = props ?? {};

          return  signUp(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof signUp>>, TError, {data: SignUpInboundDto}, TContext>(mutationFn, mutationOptions);
    }
    
export const getTickets = (
    
 signal?: AbortSignal
) => {
      return customInstance<TicketsOutboundDto[]>(
      {url: `/api/tickets`, method: 'get', signal
    },
      );
    }
  

export const getGetTicketsQueryKey = () => [`/api/tickets`];

    
export type GetTicketsQueryResult = NonNullable<Awaited<ReturnType<typeof getTickets>>>
export type GetTicketsQueryError = unknown

export const useGetTickets = <TData = Awaited<ReturnType<typeof getTickets>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTickets>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTicketsQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTickets>>> = ({ signal }) => getTickets(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getTickets>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


export const createTodayTickets = (
    createTicketsInboundDto: CreateTicketsInboundDto,
 ) => {
      return customInstance<TicketOutboundDto[]>(
      {url: `/api/tickets`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createTicketsInboundDto
    },
      );
    }
  


    export type CreateTodayTicketsMutationResult = NonNullable<Awaited<ReturnType<typeof createTodayTickets>>>
    export type CreateTodayTicketsMutationBody = CreateTicketsInboundDto
    export type CreateTodayTicketsMutationError = unknown

    export const useCreateTodayTickets = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTodayTickets>>, TError,{data: CreateTicketsInboundDto}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTodayTickets>>, {data: CreateTicketsInboundDto}> = (props) => {
          const {data} = props ?? {};

          return  createTodayTickets(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof createTodayTickets>>, TError, {data: CreateTicketsInboundDto}, TContext>(mutationFn, mutationOptions);
    }
    
export const getRecipes = (
    
 signal?: AbortSignal
) => {
      return customInstance<RecipeOutboundDto[]>(
      {url: `/api/recipes`, method: 'get', signal
    },
      );
    }
  

export const getGetRecipesQueryKey = () => [`/api/recipes`];

    
export type GetRecipesQueryResult = NonNullable<Awaited<ReturnType<typeof getRecipes>>>
export type GetRecipesQueryError = unknown

export const useGetRecipes = <TData = Awaited<ReturnType<typeof getRecipes>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRecipes>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRecipesQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecipes>>> = ({ signal }) => getRecipes(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getRecipes>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


export const createRecipe = (
    createRecipeInboundDto: CreateRecipeInboundDto,
 ) => {
      return customInstance<CreateRecipeOutboundDto>(
      {url: `/api/recipes`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createRecipeInboundDto
    },
      );
    }
  


    export type CreateRecipeMutationResult = NonNullable<Awaited<ReturnType<typeof createRecipe>>>
    export type CreateRecipeMutationBody = CreateRecipeInboundDto
    export type CreateRecipeMutationError = unknown

    export const useCreateRecipe = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRecipe>>, TError,{data: CreateRecipeInboundDto}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createRecipe>>, {data: CreateRecipeInboundDto}> = (props) => {
          const {data} = props ?? {};

          return  createRecipe(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof createRecipe>>, TError, {data: CreateRecipeInboundDto}, TContext>(mutationFn, mutationOptions);
    }
    
export const getPortfolioContacts = (
    
 signal?: AbortSignal
) => {
      return customInstance<PortfolioContactOutboundDto>(
      {url: `/api/portfolio-contacts`, method: 'get', signal
    },
      );
    }
  

export const getGetPortfolioContactsQueryKey = () => [`/api/portfolio-contacts`];

    
export type GetPortfolioContactsQueryResult = NonNullable<Awaited<ReturnType<typeof getPortfolioContacts>>>
export type GetPortfolioContactsQueryError = unknown

export const useGetPortfolioContacts = <TData = Awaited<ReturnType<typeof getPortfolioContacts>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPortfolioContacts>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPortfolioContactsQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPortfolioContacts>>> = ({ signal }) => getPortfolioContacts(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getPortfolioContacts>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


export const createPortfolioContact = (
    portfolioContactInboundDto: PortfolioContactInboundDto,
 ) => {
      return customInstance<PortfolioContactOutboundDto>(
      {url: `/api/portfolio-contacts`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: portfolioContactInboundDto
    },
      );
    }
  


    export type CreatePortfolioContactMutationResult = NonNullable<Awaited<ReturnType<typeof createPortfolioContact>>>
    export type CreatePortfolioContactMutationBody = PortfolioContactInboundDto
    export type CreatePortfolioContactMutationError = unknown

    export const useCreatePortfolioContact = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPortfolioContact>>, TError,{data: PortfolioContactInboundDto}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPortfolioContact>>, {data: PortfolioContactInboundDto}> = (props) => {
          const {data} = props ?? {};

          return  createPortfolioContact(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof createPortfolioContact>>, TError, {data: PortfolioContactInboundDto}, TContext>(mutationFn, mutationOptions);
    }
    
export const sendEmail = (
    emailInboundDto: EmailInboundDto,
 ) => {
      return customInstance<string>(
      {url: `/api/emails`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: emailInboundDto
    },
      );
    }
  


    export type SendEmailMutationResult = NonNullable<Awaited<ReturnType<typeof sendEmail>>>
    export type SendEmailMutationBody = EmailInboundDto
    export type SendEmailMutationError = unknown

    export const useSendEmail = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendEmail>>, TError,{data: EmailInboundDto}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendEmail>>, {data: EmailInboundDto}> = (props) => {
          const {data} = props ?? {};

          return  sendEmail(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof sendEmail>>, TError, {data: EmailInboundDto}, TContext>(mutationFn, mutationOptions);
    }
    
export const createEmailWithTemplate = (
    
 ) => {
      return customInstance<string>(
      {url: `/api/emails/with-template`, method: 'post'
    },
      );
    }
  


    export type CreateEmailWithTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof createEmailWithTemplate>>>
    
    export type CreateEmailWithTemplateMutationError = unknown

    export const useCreateEmailWithTemplate = <TError = unknown,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEmailWithTemplate>>, TError,TVariables, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createEmailWithTemplate>>, TVariables> = () => {
          

          return  createEmailWithTemplate()
        }

        

      return useMutation<Awaited<ReturnType<typeof createEmailWithTemplate>>, TError, TVariables, TContext>(mutationFn, mutationOptions);
    }
    
export const createTemplate = (
    
 ) => {
      return customInstance<string>(
      {url: `/api/emails/templates`, method: 'post'
    },
      );
    }
  


    export type CreateTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof createTemplate>>>
    
    export type CreateTemplateMutationError = unknown

    export const useCreateTemplate = <TError = unknown,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTemplate>>, TError,TVariables, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTemplate>>, TVariables> = () => {
          

          return  createTemplate()
        }

        

      return useMutation<Awaited<ReturnType<typeof createTemplate>>, TError, TVariables, TContext>(mutationFn, mutationOptions);
    }
    
export const deleteTemplate = (
    
 ) => {
      return customInstance<string>(
      {url: `/api/emails/templates`, method: 'delete'
    },
      );
    }
  


    export type DeleteTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTemplate>>>
    
    export type DeleteTemplateMutationError = unknown

    export const useDeleteTemplate = <TError = unknown,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTemplate>>, TError,TVariables, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTemplate>>, TVariables> = () => {
          

          return  deleteTemplate()
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteTemplate>>, TError, TVariables, TContext>(mutationFn, mutationOptions);
    }
    
export const createEmailFromPortfolio = (
    
 ) => {
      return customInstance<string>(
      {url: `/api/emails/portfolio/contact`, method: 'post'
    },
      );
    }
  


    export type CreateEmailFromPortfolioMutationResult = NonNullable<Awaited<ReturnType<typeof createEmailFromPortfolio>>>
    
    export type CreateEmailFromPortfolioMutationError = unknown

    export const useCreateEmailFromPortfolio = <TError = unknown,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createEmailFromPortfolio>>, TError,TVariables, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createEmailFromPortfolio>>, TVariables> = () => {
          

          return  createEmailFromPortfolio()
        }

        

      return useMutation<Awaited<ReturnType<typeof createEmailFromPortfolio>>, TError, TVariables, TContext>(mutationFn, mutationOptions);
    }
    
export const getBookings = (
    
 signal?: AbortSignal
) => {
      return customInstance<BookingOutboundDto[]>(
      {url: `/api/bookings`, method: 'get', signal
    },
      );
    }
  

export const getGetBookingsQueryKey = () => [`/api/bookings`];

    
export type GetBookingsQueryResult = NonNullable<Awaited<ReturnType<typeof getBookings>>>
export type GetBookingsQueryError = unknown

export const useGetBookings = <TData = Awaited<ReturnType<typeof getBookings>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBookings>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBookingsQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBookings>>> = ({ signal }) => getBookings(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getBookings>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


export const createBooking = (
    bookingInboundDto: BookingInboundDto,
 ) => {
      return customInstance<Booking>(
      {url: `/api/bookings`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: bookingInboundDto
    },
      );
    }
  


    export type CreateBookingMutationResult = NonNullable<Awaited<ReturnType<typeof createBooking>>>
    export type CreateBookingMutationBody = BookingInboundDto
    export type CreateBookingMutationError = unknown

    export const useCreateBooking = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBooking>>, TError,{data: BookingInboundDto}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createBooking>>, {data: BookingInboundDto}> = (props) => {
          const {data} = props ?? {};

          return  createBooking(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof createBooking>>, TError, {data: BookingInboundDto}, TContext>(mutationFn, mutationOptions);
    }
    
export const confirmBooking = (
    bookingId: string,
 ) => {
      return customInstance<Booking>(
      {url: `/api/bookings/${bookingId}/confirm`, method: 'post'
    },
      );
    }
  


    export type ConfirmBookingMutationResult = NonNullable<Awaited<ReturnType<typeof confirmBooking>>>
    
    export type ConfirmBookingMutationError = unknown

    export const useConfirmBooking = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmBooking>>, TError,{bookingId: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof confirmBooking>>, {bookingId: string}> = (props) => {
          const {bookingId} = props ?? {};

          return  confirmBooking(bookingId,)
        }

        

      return useMutation<Awaited<ReturnType<typeof confirmBooking>>, TError, {bookingId: string}, TContext>(mutationFn, mutationOptions);
    }
    
export const getTeamUsers = (
    
 signal?: AbortSignal
) => {
      return customInstance<TeamUserOutboundDto[]>(
      {url: `/api/users`, method: 'get', signal
    },
      );
    }
  

export const getGetTeamUsersQueryKey = () => [`/api/users`];

    
export type GetTeamUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getTeamUsers>>>
export type GetTeamUsersQueryError = unknown

export const useGetTeamUsers = <TData = Awaited<ReturnType<typeof getTeamUsers>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTeamUsers>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTeamUsersQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTeamUsers>>> = ({ signal }) => getTeamUsers(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getTeamUsers>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


export const getConnectedUser = (
    
 signal?: AbortSignal
) => {
      return customInstance<ConnectedUserOutboundDto>(
      {url: `/api/users/me`, method: 'get', signal
    },
      );
    }
  

export const getGetConnectedUserQueryKey = () => [`/api/users/me`];

    
export type GetConnectedUserQueryResult = NonNullable<Awaited<ReturnType<typeof getConnectedUser>>>
export type GetConnectedUserQueryError = unknown

export const useGetConnectedUser = <TData = Awaited<ReturnType<typeof getConnectedUser>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConnectedUser>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConnectedUserQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConnectedUser>>> = ({ signal }) => getConnectedUser(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getConnectedUser>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


export const getActiveSprint = (
    
 signal?: AbortSignal
) => {
      return customInstance<ActiveSprintOutboundDto>(
      {url: `/api/sprints/active`, method: 'get', signal
    },
      );
    }
  

export const getGetActiveSprintQueryKey = () => [`/api/sprints/active`];

    
export type GetActiveSprintQueryResult = NonNullable<Awaited<ReturnType<typeof getActiveSprint>>>
export type GetActiveSprintQueryError = unknown

export const useGetActiveSprint = <TData = Awaited<ReturnType<typeof getActiveSprint>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getActiveSprint>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetActiveSprintQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getActiveSprint>>> = ({ signal }) => getActiveSprint(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getActiveSprint>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


export const getActiveSprintBurndownChart = (
    
 signal?: AbortSignal
) => {
      return customInstance<BurndownChartColumnOutboundDto[]>(
      {url: `/api/sprints/active/burndown-chart`, method: 'get', signal
    },
      );
    }
  

export const getGetActiveSprintBurndownChartQueryKey = () => [`/api/sprints/active/burndown-chart`];

    
export type GetActiveSprintBurndownChartQueryResult = NonNullable<Awaited<ReturnType<typeof getActiveSprintBurndownChart>>>
export type GetActiveSprintBurndownChartQueryError = unknown

export const useGetActiveSprintBurndownChart = <TData = Awaited<ReturnType<typeof getActiveSprintBurndownChart>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getActiveSprintBurndownChart>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetActiveSprintBurndownChartQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getActiveSprintBurndownChart>>> = ({ signal }) => getActiveSprintBurndownChart(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getActiveSprintBurndownChart>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


export const getRestaurants = (
    
 signal?: AbortSignal
) => {
      return customInstance<RestaurantOutboundDto[]>(
      {url: `/api/restaurants`, method: 'get', signal
    },
      );
    }
  

export const getGetRestaurantsQueryKey = () => [`/api/restaurants`];

    
export type GetRestaurantsQueryResult = NonNullable<Awaited<ReturnType<typeof getRestaurants>>>
export type GetRestaurantsQueryError = unknown

export const useGetRestaurants = <TData = Awaited<ReturnType<typeof getRestaurants>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRestaurants>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRestaurantsQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRestaurants>>> = ({ signal }) => getRestaurants(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getRestaurants>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


export const getLights = (
    
 signal?: AbortSignal
) => {
      return customInstance<PhilipsHueLightOutboundDto[]>(
      {url: `/api/lights`, method: 'get', signal
    },
      );
    }
  

export const getGetLightsQueryKey = () => [`/api/lights`];

    
export type GetLightsQueryResult = NonNullable<Awaited<ReturnType<typeof getLights>>>
export type GetLightsQueryError = unknown

export const useGetLights = <TData = Awaited<ReturnType<typeof getLights>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLights>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLightsQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLights>>> = ({ signal }) => getLights(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getLights>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


export const getHealth = (
    
 signal?: AbortSignal
) => {
      return customInstance<string>(
      {url: `/api/health`, method: 'get', signal
    },
      );
    }
  

export const getGetHealthQueryKey = () => [`/api/health`];

    
export type GetHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getHealth>>>
export type GetHealthQueryError = unknown

export const useGetHealth = <TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({ signal }) => getHealth(signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getHealth>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


